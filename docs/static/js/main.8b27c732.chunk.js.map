{"version":3,"sources":["components/Header.js","hooks/useSelect.js","components/Formulario.js","components/Noticia.js","components/ListadoNoticias.js","App.js","serviceWorker.js","index.js","components/Formulario.module.css","components/Noticia.module.css"],"names":["Header","titulo","className","href","useSelect","stateInicial","opciones","useState","state","actualizarState","value","onChange","e","target","map","opcion","key","label","Formulario","guardarCategoria","categoria","SelectNoticias","styles","buscador","onSubmit","preventDefault","heading","type","btn_block","Noticia","noticia","urlToImage","url","title","description","source","src","alt","nombre_fuente","name","rel","ListadoNoticias","noticias","App","guardarNoticias","useEffect","a","fetch","respuesta","json","console","log","articles","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8b27c732.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Header = ({titulo}) => {\r\n    return (\r\n        <nav className=\"nav-wrapper light-blue darken-3\">\r\n            <a href=\"#!\" className=\"brand-logo center\">{titulo}</a>\r\n        </nav>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nconst useSelect = (stateInicial, opciones) => {\r\n    \r\n    //  state del custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const SelectNoticias = () => (\r\n        <select\r\n            className=\"browser-default\"\r\n            value={ state }\r\n            onChange={ e => actualizarState( e.target.value )}\r\n        >\r\n            { opciones.map( opcion => (\r\n                <option key={opcion.value} value={opcion.value}>\r\n                    {opcion.label}\r\n                </option>\r\n            ))}\r\n        </select>\r\n    );\r\n\r\n    // Devuelve el estado del componente y su estructura\r\n    return [state, SelectNoticias];\r\n}\r\n\r\nexport default useSelect;\r\n","import React from 'react'\r\nimport styles from './Formulario.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport useSelect from '../hooks/useSelect';\r\n\r\nexport const Formulario = ({ guardarCategoria }) => {\r\n\r\n    const OPCIONES = [\r\n        { value: 'general', label: 'General'},\r\n        { value: 'business', label: 'Negocios'},\r\n        { value: 'entertainment', label: 'Entretenimiento'},\r\n        { value: 'health', label: 'Salud'},\r\n        { value: 'science', label: 'Ciencia'},\r\n        { value: 'sports', label: 'Deportes'},\r\n        { value: 'technology', label: 'Tecnología'}\r\n    ]\r\n\r\n    // Utilizo mi custom hook\r\n    const [ categoria, SelectNoticias] = useSelect('general', OPCIONES);\r\n\r\n    // Submit del formulario, se pasa la categoría a App.js\r\n    const buscarNoticias = e => {\r\n        e.preventDefault();\r\n\r\n        guardarCategoria(categoria);\r\n    }\r\n\r\n    return (\r\n        <div className={`${styles.buscador} row`}>\r\n             <div className=\"col s12 m7 offset-m2\">\r\n                 <form\r\n                    onSubmit={ buscarNoticias }\r\n                 >\r\n                     <h2 className={styles.heading}>Encuentra Noticias por Categoría</h2>\r\n                     <SelectNoticias />\r\n                     <div className=\"input-field col s12\">\r\n                         <input \r\n                            type=\"submit\"\r\n                            className={`${styles.btn_block} btn-large amber darken-2`}\r\n                            value=\"Buscar\"\r\n                         />\r\n                     </div>\r\n                 </form>\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarCategoria: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Noticia.module.css';\r\n\r\nconst Noticia = ({ noticia }) => {\r\n\r\n    // Extraemos los datos\r\n    const { urlToImage, url, title, description, source } = noticia;\r\n\r\n    return (\r\n        <div className=\"col s12 m6 l4\">\r\n            <div className=\"card large\">\r\n                <div className=\"card-image\">\r\n                    <img src={urlToImage} alt={ title } />\r\n                    <span className={`${styles.nombre_fuente} card-title`}>{ source.name }</span>\r\n                </div>\r\n                \r\n                <div className=\"card-content\">\r\n                    <h5>{ title }</h5>\r\n                    <p>{ description }</p>\r\n                </div>\r\n\r\n                <div className=\"card-action\">\r\n                    <a \r\n                        href={ url } \r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        className=\"waves-effect waves-light btn\"\r\n                    > Ver Noticia Completa</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nNoticia.propTypes = {\r\n    noticia: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Noticia\r\n","import React from 'react';\r\nimport Noticia from './Noticia';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ListadoNoticias = ({noticias}) =>  (\r\n        <div className=\"row\">\r\n            { noticias.map( noticia =>( \r\n                <Noticia \r\n                    key={ noticia.url }\r\n                    noticia={ noticia }\r\n                />\r\n            ))}\r\n        </div>\r\n)\r\n\r\nListadoNoticias.propTypes = {\r\n    noticias: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ListadoNoticias\r\n","import React, { useState, useEffect } from 'react';\nimport { Header } from './components/Header';\nimport { Formulario } from './components/Formulario';\nimport ListadoNoticias from './components/ListadoNoticias';\n//rafcp comando para generar todo el código de forma automática\n\nfunction App() {\n\n  // Se define la categoría y noticias\n  const [ categoria, guardarCategoria ] = useState('');\n  const [ noticias, guardarNoticias ] = useState([])\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = `https://newsapi.org/v2/top-headlines?country=ar&category=${categoria}&apiKey=d661ffa4c5f743bbb74aea372ec30d62`;\n\n      const respuesta = await fetch(url);\n      const noticias = await respuesta.json();\n      console.log(noticias)\n      guardarNoticias(noticias.articles);\n    }\n    consultarAPI();\n  }, [categoria]);\n\n\n  return (\n    <>\n      <Header \n        titulo='BUSCADOR DE NOTICIAS'\n      />\n\n      <div className=\"container white\">\n        <Formulario guardarCategoria={ guardarCategoria }/>\n\n        <ListadoNoticias noticias={ noticias } />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"Formulario_heading__32rc3\",\"buscador\":\"Formulario_buscador__3oo1z\",\"btn_block\":\"Formulario_btn_block__3zgeI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nombre_fuente\":\"Noticia_nombre_fuente__F9DPU\"};"],"sourceRoot":""}